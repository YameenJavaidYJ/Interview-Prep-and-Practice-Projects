Sharding and Indexing

What are indexes in databases and how do they work?

Indexes = data structures (often B-trees or Hashes) that improve query speed by allowing faster lookups.
Example: Index on email lets DB find user quickly instead of scanning entire table.
Tradeoff: Faster reads, slower writes (because index must update).
ðŸ‘‰ Useful for search-heavy tables.


-------------------------------------------------------------------------------------------------------------------------------

How do transactions work in databases?

A transaction = a sequence of operations performed as a single logical unit.

Follow ACID properties:

    Atomicity â†’ all or nothing.
    Consistency â†’ database remains valid.
    Isolation â†’ concurrent transactions donâ€™t interfere.
    Durability â†’ once committed, changes survive crashes.
    ðŸ‘‰ Example: Bank transfer = debit + credit must both succeed or rollback.


-------------------------------------------------------------------------------------------------------------------------------

What is sharding in databases?

Sharding = horizontal partitioning of data across multiple database instances/servers.

Key Concepts:
â€¢ Split large dataset into smaller, more manageable pieces (shards)
â€¢ Each shard contains subset of data based on a shard key
â€¢ Distributes load across multiple servers

Common Sharding Strategies:
1. Range-based: Partition by value ranges (e.g., A-M users on shard1, N-Z on shard2)
2. Hash-based: Use hash function on shard key to determine shard
3. Directory-based: Lookup service maps keys to shards

Benefits:
    Improved performance (parallel processing)
    Better scalability (horizontal scaling)
    Reduced load per server

Challenges:
    Complex queries across shard    
    Rebalancing when adding/removing shard 
    Loss of ACID properties across shards
    Hotspots if sharding key poorly chosen

ðŸ‘‰ Example: E-commerce app shards user data by user_id hash, so each server handles subset of users.