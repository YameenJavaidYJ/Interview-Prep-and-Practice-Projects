React Lifecycle - Comprehensive Guide
--------

-> Overview
React components follow a predictable lifecycle from creation to destruction. Understanding this lifecycle is crucial for proper state management and side effects.

--------

Component Lifecycle Phases
--------

-> 1. Mounting
    - Component is created and added to DOM
    - Initial render occurs
    - Effects run after DOM is painted

-> 2. Updating
    - Component re-renders due to state/props changes
    - Effects may re-run based on dependencies
    - DOM updates are committed

-> 3. Unmounting
    - Component is removed from DOM
    - Cleanup functions run
    - Memory is freed

--------

Detailed Lifecycle Flow
--------

-> Render Cycle
```
Trigger (state/props change)
 → Render (diff virtual DOM)
 → Commit (update DOM)
 → useLayoutEffect (synchronous)
 → Browser paint
 → useEffect (asynchronous)
```

-> Effect Lifecycle

    -> Setup Phase
        - After React paints the DOM
        - Effect callback runs
        - Side effects are executed

    -> Cleanup Phase
        - Before effect runs again (on next render)
        - Before component unmounts
        - Cleanup function runs

    -> Re-run Decision
        - React checks dependency array
        - `[]` = runs only once (mount/unmount)
        - `[dep]` = runs when dep changes
        - No array = runs on every render

--------

LIFECYCLE EXAMPLES
--------

-> ON MOUNT (First Render):
    1. Component mounts
    2. React paints UI
    3. Effect callback runs
    4. Side effects execute

-> ON UPDATE (Dependencies Change):
    1. Before new effect runs
    2. Cleanup from previous run executes
    3. New effect setup runs with updated dependencies

-> ON UNMOUNT:
    1. Component removed from tree
    2. Cleanup function runs one last time
    3. Memory cleanup occurs

--------

HOOKS AND LIFECYCLE
--------

-> useEffect:
    - Runs after DOM updates
    - Handles side effects
    - Can return cleanup function

-> useLayoutEffect:
    - Runs synchronously after DOM mutations
    - Use for DOM measurements
    - Blocks browser painting

-> useMemo:
    - Memoizes computed values
    - Recalculates when dependencies change
    - Optimizes performance

-> useCallback:
    - Memoizes functions
    - Prevents unnecessary re-renders
    - Optimizes child component updates

--------

BEST PRACTICES
--------

-> 1. DEPENDENCY ARRAYS:
    - Always include all dependencies
    - Use ESLint plugin to catch missing deps
    - Be careful with object/function dependencies

-> 2. CLEANUP:
    - Always cleanup subscriptions, timers, listeners
    - Prevent memory leaks
    - Cancel ongoing requests

-> 3. PERFORMANCE:
    - Use useMemo for expensive calculations
    - Use useCallback for stable function references
    - Avoid unnecessary re-renders

-> 4. SIDE EFFECTS:
    - Keep effects focused and single-purpose
    - Separate concerns into different effects
    - Use custom hooks for reusable logic

--------

COMMON PATTERNS
--------

-> 1. DATA FETCHING:
    useEffect(() => {
      let cancelled = false;
      fetchData().then(data => {
        if (!cancelled) setData(data);
      });
      return () => { cancelled = true; };
    }, []);

-> 2. SUBSCRIPTIONS:
    useEffect(() => {
      const subscription = subscribe();
      return () => subscription.unsubscribe();
    }, []);

-> 3. TIMERS:
    useEffect(() => {
      const timer = setInterval(() => {
        // do something
      }, 1000);
      return () => clearInterval(timer);
    }, []);

-> 4. DOM MANIPULATION:
    useEffect(() => {
      const element = document.getElementById('myElement');
      // manipulate DOM
      return () => {
        // cleanup DOM changes
      };
    }, []);

--------

LIFECYCLE DIAGRAM
--------

Component Creation
        ↓
    Initial Render
        ↓
    DOM Update
        ↓
    useLayoutEffect
        ↓
    Browser Paint
        ↓
    useEffect
        ↓
    Component Ready
        ↓
    State/Props Change
        ↓
    Re-render Cycle
        ↓
    Cleanup → Setup
        ↓
    Component Unmount
        ↓
    Final Cleanup