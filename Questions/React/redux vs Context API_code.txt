REDUX vs CONTEXT API - CODE EXAMPLES
=====================================

REDUX EXAMPLE
-------------
```javascript
// store.js
import { createStore } from 'redux';

const initialState = {
    count: 0,
    user: null
};

function counterReducer(state = initialState, action) {
    switch (action.type) {
        case 'INCREMENT':
            return {
                ...state,
                count: state.count + 1
            };
        case 'DECREMENT':
            return {
                ...state,
                count: state.count - 1
            };
        case 'SET_USER':
            return {
                ...state,
                user: action.payload
            };
        default:
            return state;
    }
}

export const store = createStore(counterReducer);

// actions.js
export const increment = () => ({ type: 'INCREMENT' });
export const decrement = () => ({ type: 'DECREMENT' });
export const setUser = (user) => ({ 
    type: 'SET_USER', 
    payload: user 
});

// Component.js
import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { increment, decrement } from './actions';

function Counter() {
    const count = useSelector(state => state.count);
    const dispatch = useDispatch();

    return (
        <div>
            <h2>Count: {count}</h2>
            <button onClick={() => dispatch(increment())}>+</button>
            <button onClick={() => dispatch(decrement())}>-</button>
        </div>
    );
}
```

-----------------------

CONTEXT API EXAMPLE
-------------------
```javascript
// UserContext.js
import React, { createContext, useContext, useReducer } from 'react';

const UserContext = createContext();

const initialState = {
    user: null,
    isLoading: false,
    theme: 'light'
};

function userReducer(state, action) {
    switch (action.type) {
        case 'SET_USER':
            return {
                ...state,
                user: action.payload,
                isLoading: false
            };
        case 'SET_LOADING':
            return {
                ...state,
                isLoading: action.payload
            };
        case 'TOGGLE_THEME':
            return {
                ...state,
                theme: state.theme === 'light' ? 'dark' : 'light'
            };
        default:
            return state;
    }
}

export function UserProvider({ children }) {
    const [state, dispatch] = useReducer(userReducer, initialState);

    const setUser = (user) => {
        dispatch({ type: 'SET_USER', payload: user });
    };

    const setLoading = (loading) => {
        dispatch({ type: 'SET_LOADING', payload: loading });
    };

    const toggleTheme = () => {
        dispatch({ type: 'TOGGLE_THEME' });
    };

    return (
        <UserContext.Provider value={{
            ...state,
            setUser,
            setLoading,
            toggleTheme
        }}>
            {children}
        </UserContext.Provider>
    );
}

export const useUser = () => {
    const context = useContext(UserContext);
    if (!context) {
        throw new Error('useUser must be used within UserProvider');
    }
    return context;
};

// Component.js
import React from 'react';
import { useUser } from './UserContext';

function Profile() {
    const { user, theme, setUser, toggleTheme } = useUser();

    return (
        <div className={theme}>
            <h2>User: {user?.name || 'Not logged in'}</h2>
            <button onClick={() => setUser({ name: 'John Doe' })}>
                Login
            </button>
            <button onClick={toggleTheme}>
                Toggle Theme ({theme})
            </button>
        </div>
    );
}

// App.js
import React from 'react';
import { UserProvider } from './UserContext';
import Profile from './Profile';

function App() {
    return (
        <UserProvider>
            <Profile />
        </UserProvider>
    );
}
```
