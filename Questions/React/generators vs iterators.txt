Generators vs Iterators
--------

-> How do iterators work in JS? What are generators? 
-> What is the difference? Use cases? 
-> When would you use generator instead of simple iterator?

--------

-> Iterator: an object which implements the next() method, returning { value, done }.

--------

    function createIterator(array) {
    let index = 0;

    return {
        next: function() {
        if (index < array.length) {
            return { value: array[index++], done: false };
        } else {
            return { value: undefined, done: true };
        }
        }
    };
    }

    const myIterator = createIterator([10, 20, 30]);

    console.log(myIterator.next()); // { value: 10, done: false }
    console.log(myIterator.next()); // { value: 20, done: false }
    console.log(myIterator.next()); // { value: 30, done: false }
    console.log(myIterator.next()); // { value: undefined, done: true }

--------

-> Generator: function declared with function* which yields values; automatically creates an iterator.

--------

    function* numberGenerator() {
        yield 10;
        yield 20;
        yield 30;
    }

    const gen = numberGenerator();

    console.log(gen.next()); // { value: 10, done: false }
    console.log(gen.next()); // { value: 20, done: false }
    console.log(gen.next()); // { value: 30, done: false }
    console.log(gen.next()); // { value: undefined, done: true }

--------

-> Generates on demand, can pause and resume execution, useful for lazy evaluation, large data sets, 
    asynchronous flows, etc.
-> Can simplify writing complex iteration logic; e.g. infinite sequences, pipelines.