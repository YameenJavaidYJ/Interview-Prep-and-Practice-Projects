What are RESTful APIs and how do they work?

REST (Representational State Transfer) is an architectural style for APIs.

RESTful APIs use HTTP methods:

    -> GET â†’ read
    -> POST â†’ create
    -> PUT/PATCH â†’ update
    -> DELETE â†’ remove

They are stateless, meaning each request contains all necessary info (no session stored on server).
    Example: /users/1 returns user with id=1.

--------------------------------------------------------------------------------------------------------------------------------

What is CORS and how do you handle it?

    CORS (Cross-Origin Resource Sharing) â†’ browser security policy that restricts requests from different origins.

    Handled by setting response headers on server:

    Access-Control-Allow-Origin
    Access-Control-Allow-Methods
    Access-Control-Allow-Headers
    ðŸ‘‰ In Express: use the cors middleware.


---------------------------------------------------------------------------------------------------------------------------------

What is XSS?

    XSS (Cross-Site Scripting) â†’ malicious scripts injected into trusted websites that execute in users' browsers.

    Types:
    â€¢ Stored XSS: Malicious script stored on server (e.g., in database comments)
    â€¢ Reflected XSS: Script reflected off server in URL parameters or form data
    â€¢ DOM-based XSS: Client-side script modifies DOM unsafely

    Prevention:
    â€¢ Input validation and sanitization
    â€¢ Output encoding (escape HTML, JS, CSS)
    â€¢ Content Security Policy (CSP) headers
    â€¢ Use frameworks that auto-escape (React, Angular)
    â€¢ HttpOnly cookies to prevent script access

-----------------------------------------------------------------------------------------------------------------------------------

What is CSRF?

    CSRF (Cross-Site Request Forgery) â†’ attacker tricks user into making unwanted requests to a site where they're authenticated.

    How it works:
    â€¢ User logged into site A
    â€¢ Visits malicious site B
    â€¢ Site B makes request to site A using user's session
    â€¢ Site A processes request thinking it's legitimate

    Prevention:
    â€¢ CSRF tokens (synchronizer token pattern)
    â€¢ SameSite cookie attribute
    â€¢ Double-submit cookies
    â€¢ Check Referer/Origin headers
    â€¢ Use POST for state-changing operations
    â€¢ Re-authentication for sensitive actions