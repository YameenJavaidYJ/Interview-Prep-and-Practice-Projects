API Gateways

* What is an API gateway? Why use it? 
* What responsibilities should it have? 
* Where in your booking system architecture it fits?

----------------------------------------------------------------------------------------------------------------

An API Gateway acts as a front door for all client requests, providing routing, security, monitoring, and performance 
optimizations, so that backend services remain decoupled and focused on business logic.

----------------------------------------------------------------------------------------------------------------

ðŸ”¹ An API Gateway is a single entry point that sits between clients (web/mobile apps) and backend services/microservices.
It receives requests from clients â†’ routes them to the right service â†’ aggregates results â†’ sends response back.

ðŸ”¹ Why use it?
    
    Centralized access â†’ clients donâ€™t need to know all service endpoints.
    Decoupling â†’ hides microservice complexity.
    Security â†’ enforces authentication, authorization, rate-limiting.
    Performance â†’ enables caching, request batching, load balancing.
    Cross-cutting concerns â†’ logging, monitoring, retries.

ðŸ”¹ Responsibilities of an API Gateway

    Routing â€“ forward request to correct backend service.
    Authentication & Authorization â€“ validate tokens/credentials.
    Rate Limiting & Throttling â€“ prevent abuse.
    Caching â€“ reduce latency & backend load.
    Request Transformation â€“ protocol translation (HTTP â†’ gRPC, REST â†” GraphQL).
    Response Aggregation â€“ combine results from multiple services.
    Monitoring & Logging â€“ track metrics, errors, traffic.
    Fallbacks & Circuit Breaking â€“ improve resilience.