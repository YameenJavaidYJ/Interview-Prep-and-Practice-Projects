-> promises
-> callback hell
-> async / await


what is event loop ?

The event loop in JavaScript is the mechanism that allows asynchronous code to run in a single-threaded environment. 
It continuously checks the call stack and task queues (microtasks and macrotasks), executing code in order: 
synchronous code first, then microtasks (like Promises), and then macrotasks (like setTimeout). 
This is how JavaScript handles concurrency without multi-threading.

-> synchronous code (variable declarations, function calls, loops, console.logs())
-> promises/job queues (Microtasks)
-> setInterval, setTimeouts, I/O callbacks, UI rendering Tasks (Macrotask)

-> same order is followed in case of nesting

-> Rendering doesnâ€™t happen immediately when you change the DOM.
-> Instead, the browser batches DOM changes and paints after microtasks are cleared, before the next macrotask starts.

-------------------------------------------------------------------------------------------------------------------

-> only one macrotask runs per loop iteration, then the loop goes back to check microtasks again.

Example Below Will Explain.

    setTimeout(() => {
    console.log("Task 1");

    Promise.resolve().then(() => {
        console.log("Microtask 1");
    });
    }, 0);

    setTimeout(() => {
    console.log("Task 2");

    Promise.resolve().then(() => {
        console.log("Microtask 2");
    });
}, 0);



Initial sync code: nothing else happens, only two timers scheduled.

ðŸ”¸ First macrotask (Task 1):

    Runs console.log("Task 1") â†’ prints Task 1.
    Schedules a microtask Microtask 1.
    Event loop finishes this macrotask.
    Before moving on, it checks microtasks â†’ runs Microtask 1.

ðŸ”¸ Second macrotask (Task 2):

    Runs console.log("Task 2") â†’ prints Task 2.
    Schedules a microtask Microtask 2.
    Event loop finishes this macrotask.
    Before moving on, it checks microtasks â†’ runs Microtask 2.

